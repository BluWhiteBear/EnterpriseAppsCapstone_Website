@{
    ViewData["Title"] = "Home Page";
}

<div class="row">
    <div class="col-8">
        <h1>Breadcrumbs Index</h1>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus eget quam commodo, vestibulum mauris eget, interdum nisi. Sed tristique massa sem, ut posuere nulla tincidunt quis. Maecenas venenatis gravida dui, nec porta diam varius quis. Aliquam at lectus ac libero dapibus pretium. Quisque blandit rhoncus scelerisque. Sed accumsan tincidunt ipsum et commodo. Quisque sit amet elementum urna. Aliquam dapibus, justo tristique luctus tempor, metus lectus convallis magna, ut suscipit mauris orci eget elit. Pellentesque egestas velit leo, sed sodales ex finibus quis. Nunc tristique tellus orci, a aliquet nibh commodo ut. Suspendisse mi justo, interdum non maximus et, venenatis viverra mauris. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Phasellus id luctus metus. Suspendisse felis diam, scelerisque vel pulvinar sit amet, accumsan non dolor. Duis at lacus varius, faucibus velit ac, efficitur eros. Integer ullamcorper tincidunt urna in facilisis.</p>
    </div>
    <div class="col-4">
        <input id="pac-input" class="controls" type="text" placeholder="Search Box" />
        <div id="map" style="height:75vh; width:50vh; margin-left:auto;"></div>

        <script>
            function initAutocomplete() {
                const map = new google.maps.Map(document.getElementById("map"), {
                    center: { lat: 40.423804, lng: -80.188597 },
                    zoom: 17,
                    mapTypeId: "roadmap",
                });

                // Create the search box and link it to the UI element.
                const input = document.getElementById("pac-input");
                const searchBox = new google.maps.places.SearchBox(input);

                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                // Bias the SearchBox results towards current map's viewport.
                map.addListener("bounds_changed", () => {
                    searchBox.setBounds(map.getBounds());
                });

                let markers = [];

                // Listen for the event fired when the user selects a prediction and retrieve
                // more details for that place.
                searchBox.addListener("places_changed", () => {
                    const places = searchBox.getPlaces();

                    if (places.length == 0) {
                        return;
                    }

                    // Clear out the old markers.
                    markers.forEach((marker) => {
                        marker.setMap(null);
                    });
                    markers = [];

                    // For each place, get the icon, name and location.
                    const bounds = new google.maps.LatLngBounds();

                    places.forEach((place) => {
                        if (!place.geometry || !place.geometry.location) {
                            console.log("Returned place contains no geometry");
                            return;
                        }

                        const icon = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25),
                        };

                        // Create a marker for each place.
                        markers.push(
                            new google.maps.Marker({
                                map,
                                icon,
                                title: place.name,
                                position: place.geometry.location,
                            })
                        );
                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }
                    });
                    map.fitBounds(bounds);
                });
            }

            window.initAutocomplete = initAutocomplete;
        </script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA6YBl1gpbBPmcqQc8XZNIDIGRq85_xZG0&libraries=places&callback=initAutocomplete"></script>
    </div>
</div>