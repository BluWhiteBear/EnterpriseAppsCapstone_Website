@{
    ViewData["Title"] = "Home Page";
}

<div class="row">
    <div class="col bg-hype-secondary round-sm">
        <h1 class="text-white">Breadcrumbs</h1>
        <p class="text-white">Welcome to Breadcrumbs! Breadcrumbs is a croudsourced navigation app that brings the human touch back to getting directions.</p>
    </div>

    <div class="col-4">
        <div style="width:50vh;">
            <i class="fa fa-user icon"></i>
            <input id="pac-input" style="height:4vh; width:100%; margin-bottom:10px;" class="controls round-sm" type="text" placeholder=" 🔍 Search..." />
            <div id="map" class="round-sm" style="height:50vh; width:100%;"></div>
        </div>
        
        <script>
            function initAutocomplete() {
                const map = new google.maps.Map(document.getElementById("map"), {
                    center: { lat: 40.423804, lng: -80.188597 },
                    zoom: 17,
                    mapTypeId: "roadmap",
                });

                // Create the search box and link it to the UI element.
                const input = document.getElementById("pac-input");
                const searchBox = new google.maps.places.SearchBox(input);

                //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                // Bias the SearchBox results towards current map's viewport.
                map.addListener("bounds_changed", () => {
                    searchBox.setBounds(map.getBounds());
                });

                let markers = [];

                // Listen for the event fired when the user selects a prediction and retrieve
                // more details for that place.
                searchBox.addListener("places_changed", () => {
                    const places = searchBox.getPlaces();

                    if (places.length == 0) {
                        return;
                    }

                    // Clear out the old markers.
                    markers.forEach((marker) => {
                        marker.setMap(null);
                    });
                    markers = [];

                    // For each place, get the icon, name and location.
                    const bounds = new google.maps.LatLngBounds();

                    places.forEach((place) => {
                        if (!place.geometry || !place.geometry.location) {
                            console.log("Returned place contains no geometry");
                            return;
                        }

                        const icon = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25),
                        };

                        // Create a marker for each place.
                        markers.push(
                            new google.maps.Marker({
                                map,
                                icon,
                                title: place.name,
                                position: place.geometry.location,
                            })
                        );
                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }
                    });
                    map.fitBounds(bounds);
                });
            }

            window.initAutocomplete = initAutocomplete;
        </script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA6YBl1gpbBPmcqQc8XZNIDIGRq85_xZG0&libraries=places&callback=initAutocomplete"></script>
    </div>
</div>